<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pprof on 大道至简</title>
    <link>https://qiref.github.io/tags/pprof/</link>
    <description>Recent content in pprof on 大道至简</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-zh</language>
    <lastBuildDate>Fri, 23 Feb 2024 15:53:46 +0800</lastBuildDate><atom:link href="https://qiref.github.io/tags/pprof/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go ppfof工具使用</title>
      <link>https://qiref.github.io/post/2024/02/23/go-ppfof%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 23 Feb 2024 15:53:46 +0800</pubDate>
      
      <guid>https://qiref.github.io/post/2024/02/23/go-ppfof%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</guid>
      <description>pprof pprof 是用于可视化和分析性能分析数据的工具;
runtime/pprof：采集程序（非 Server）的运行数据进行分析 net/http/pprof：采集 HTTP Server 的运行时数据进行分析 启用方式 在main函数之前使用启动, DoProfile(6060)
import ( &amp;quot;net/http&amp;quot; _ &amp;quot;net/http/pprof&amp;quot; &amp;quot;strconv&amp;quot; ) type ProfileServer struct { } func (this *ProfileServer) DoProfile(port int) { go func() { err := http.ListenAndServe(&amp;quot;:&amp;quot;+strconv.FormatInt(int64(port), 10), nil) if err != nil { log.Errorf(&amp;quot;Failed to do profile on port: %d&amp;quot;, port) } else { log.Infof(&amp;quot;pprof start successfully on port %d&amp;quot;, port) } }() } 分析 curl &#39;http://127.0.0.1:6060/debug/pprof/profile&#39; -o profile.20240223 curl &#39;http://127.</description>
    </item>
    
  </channel>
</rss>
